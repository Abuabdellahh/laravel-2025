
// php artisan make:migration add_country_to_students
// php artisan migrate:refresh --seed - Rolls back all migrations and then runs them again, and seeds the database with data

// best command
// php artisan migrate:refresh - Rolls back all migrations and then runs them again
// php artisan migrate:rollback  - Rolls back the last batch of migrations
// php artisan migrate:reset    - Rolls back all migrations in the application
// php artisan migrate:fresh    - Drops all tables and re-runs all migrations


/**
 * Laravel Migrations Explained:
 * 
 * 1. Purpose:
 *    - Migrations are like version control for your database
 *    - They allow you to define and modify database structure using PHP code
 *    - Track database changes over time
 * 
 * 2. Key Components:
 *    - up(): Defines changes to apply to the database
 *    - down(): Defines how to reverse those changes
 *    - Schema::table(): Modifies existing tables
 *    - Blueprint: Provides methods to define columns
 * 
 * 3. Benefits:
 *    - Version control for database structure
 *    - Easy to share database changes with team
 *    - Can roll back changes if needed
 *    - Database-agnostic (works with MySQL, PostgreSQL, etc.)
 * 
 * 4. Common Operations:
 *    - Creating tables
 *    - Adding/removing columns
 *    - Creating indexes
 *    - Adding foreign keys
 *    - Modifying column types
 * 
 * 5. Best Practices:
 *    - Each migration should do one thing
 *    - Always include down() method for rollback
 *    - Use meaningful names for migrations
 *    - Test migrations in development first
 */

/**
 * The down() method in Laravel migrations is crucial for database rollbacks:
 * 
 * 1. Purpose:
 *    - Reverses changes made in the up() method
 *    - Allows rolling back to previous database state
 *    - Essential for maintaining database version control
 * 
 * 2. Implementation:
 *    - Must mirror the up() method in reverse order
 *    - Should remove columns in opposite order they were added
 *    - Must handle foreign keys before dropping columns
 * 
 * 3. Example Structure:
 *    - Drop foreign keys first
 *    - Drop columns in reverse order
 *    - Remove indexes if necessary
 *    - Drop tables if created
 * 
 * 4. Best Practices:
 *    - Always implement down() method
 *    - Test rollback functionality
 *    - Keep operations atomic
 *    - Handle dependencies properly
 * 
 * 5. Common Use Cases:
 *    - Development testing
 *    - Production rollbacks
 *    - Database version control
 *    - Team collaboration
 */